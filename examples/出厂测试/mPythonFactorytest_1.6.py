
from machine import Timer,UART
from mpython import *
import time,ubinascii,framebuf,network
import machine,music


logo = bytearray([\
0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X07,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X0F,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X1F,0X06,0X00,0X00,0X00,0X00,0X00,0X00,
0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X3E,0X0E,0X00,0X00,0X00,0X00,0X00,0X00,
0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X7C,0X1F,0X00,0X00,0X00,0X00,0X00,0X00,
0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0XF8,0X3E,0X00,0X00,0X00,0X00,0X00,0X00,
0X00,0X00,0X00,0X00,0X00,0X00,0X06,0X01,0XF0,0X7C,0X00,0X00,0X00,0X00,0X00,0X00,
0X00,0X00,0X00,0X00,0X00,0X00,0X0F,0X03,0XE0,0XF8,0X00,0X00,0X00,0X00,0X00,0X00,
0X00,0X00,0X00,0X00,0X00,0X00,0X1F,0X07,0XC1,0XF0,0X00,0X00,0X00,0X00,0X00,0X00,
0X00,0X00,0X00,0X00,0X00,0X00,0X3E,0X0F,0X83,0XE0,0X00,0X00,0X00,0X00,0X00,0X00,
0X00,0X00,0X00,0X00,0X00,0X00,0X7C,0X1F,0X07,0XC1,0XC0,0X00,0X00,0X00,0X00,0X00,
0X00,0X00,0X00,0X00,0X00,0X00,0XF8,0X3E,0X0F,0X83,0XC0,0X00,0X00,0X00,0X00,0X00,
0X00,0X00,0X00,0X00,0X00,0X01,0XF0,0X7C,0X1F,0X07,0XC0,0X00,0X00,0X00,0X00,0X00,
0X00,0X00,0X00,0X00,0X00,0X03,0XE0,0XF8,0X3E,0X0F,0X80,0X00,0X00,0X00,0X00,0X00,
0X00,0X00,0X00,0X00,0X00,0X07,0XC0,0XF0,0X7C,0X1F,0X00,0X00,0X00,0X00,0X00,0X00,
0X00,0X00,0X00,0X00,0X00,0X0F,0X81,0XE0,0XF8,0X3E,0X00,0X00,0X00,0X00,0X00,0X00,
0X00,0X00,0X00,0X00,0X00,0X1F,0X01,0XE1,0XF0,0X7C,0X00,0X00,0X00,0X00,0X00,0X00,
0X00,0X00,0X00,0X00,0X00,0X3E,0X01,0XE3,0XE0,0XF8,0X00,0X00,0X00,0X00,0X00,0X00,
0X00,0X00,0X00,0X00,0X00,0X3C,0X01,0XE3,0XC1,0XF0,0X00,0X00,0X00,0X00,0X00,0X00,
0X00,0X00,0X00,0X00,0X00,0X78,0X01,0XE1,0X83,0XE0,0X00,0X00,0X00,0X00,0X00,0X00,
0X00,0X00,0X00,0X00,0X00,0X78,0XC1,0XE0,0X07,0XC0,0X00,0X00,0X00,0X00,0X00,0X00,
0X00,0X00,0X00,0X00,0X00,0XF0,0XE0,0XF0,0X0F,0X83,0X00,0X00,0X00,0X00,0X00,0X00,
0X00,0X00,0X00,0X00,0X00,0XF0,0XE0,0XF8,0X1F,0X07,0X80,0X00,0X00,0X00,0X00,0X00,
0X00,0X00,0X00,0X00,0X01,0XE7,0XF8,0X7C,0X1E,0X0F,0X80,0X00,0X00,0X00,0X00,0X00,
0X00,0X00,0X00,0X00,0X01,0XE7,0XFC,0X3E,0X0C,0X1F,0X00,0X00,0X00,0X00,0X00,0X00,
0X00,0X00,0X00,0X00,0X01,0XE7,0XF8,0X1F,0X00,0X3E,0X00,0X00,0X00,0X00,0X00,0X00,
0X00,0X00,0X00,0X00,0X01,0XE0,0XE0,0X0F,0X80,0X7C,0X00,0X00,0X00,0X00,0X00,0X00,
0X00,0X00,0X00,0X00,0X01,0XC0,0XE0,0X07,0XC0,0XF8,0X00,0X00,0X00,0X00,0X00,0X00,
0X00,0X00,0X00,0X00,0X01,0XE0,0XC0,0X03,0XC1,0XF0,0X00,0X00,0X00,0X00,0X00,0X00,
0X00,0X00,0X00,0X00,0X01,0XE0,0X00,0X01,0XE3,0XE0,0X00,0X00,0X00,0X00,0X00,0X00,
0X00,0X00,0X00,0X00,0X01,0XE0,0X00,0X01,0XE7,0XC0,0X00,0X00,0X00,0X00,0X00,0X00,
0X00,0X00,0X00,0X00,0X00,0XE0,0X00,0X00,0XFF,0X80,0X00,0X00,0X00,0X00,0X00,0X00,
0X00,0X00,0X00,0X00,0X00,0XF0,0XC0,0X18,0XFF,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
0X00,0X00,0X00,0X00,0X00,0XF0,0XF0,0X38,0XFE,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
0X00,0X00,0X00,0X00,0X00,0X78,0XFF,0XF8,0XFC,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
0X00,0X00,0X00,0X00,0X00,0X7C,0X7F,0XF1,0XF8,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
0X00,0X00,0X00,0X00,0X00,0X3E,0X0F,0X81,0XF0,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
0X00,0X00,0X00,0X00,0X00,0X1F,0X00,0X07,0XE0,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
0X00,0X00,0X00,0X00,0X00,0X0F,0XC0,0X1F,0XC0,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
0X00,0X00,0X00,0X00,0X00,0X07,0XFF,0XFF,0X80,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
0X00,0X00,0X00,0X00,0X00,0X03,0XFF,0XFE,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
0X00,0X00,0X00,0X00,0X00,0X00,0XFF,0XF8,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
0X00,0X00,0X00,0X00,0X00,0X00,0X1F,0XE0,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
])

# analog
P0 =  MPythonPin(0,PinMode.ANALOG)
P1 = MPythonPin(1,PinMode.ANALOG)
P2 = MPythonPin(2,PinMode.ANALOG)
ext = MPythonPin(3,PinMode.ANALOG)



# Pin test
P8 = MPythonPin(8,PinMode.PWM)
P9 = MPythonPin(9,PinMode.PWM)
P13 = MPythonPin(13,PinMode.PWM)
P14 = MPythonPin(14,PinMode.PWM)
P15 = MPythonPin(15,PinMode.PWM)
P16= MPythonPin(16,PinMode.PWM)

P8.write_analog(512,20)
P9.write_analog(512,20)
P13.write_analog(512,20)
P14.write_analog(512,20)
P15.write_analog(512,20)
P16.write_analog(512,20)


# MAC id
machine_id = ubinascii.hexlify(machine.unique_id()).decode().upper()

# a,b按键中断处理函数：蜂鸣器响
def btn_A_irq(_):
    if button_a.value() == 0:
        music.pitch(1000)
    else:
        
        music.stop()

def btn_B_irq(_):
    if button_b.value() == 0:
        music.pitch(1000)
    else:
       
        music.stop()
    
    
def testoled():
  
    logo_ = framebuf.FrameBuffer(logo,128,64, framebuf.MONO_HLSB)
    #display.invert(1)
    oled.blit(logo_,0,0)
    oled.show()
    sleep_ms(1000)
    oled.fill(0)
    sleep_ms(200)
    oled.fill(1)
    oled.show()

# a,b 按键中断处理
button_a.irq(btn_A_irq)     
button_b.irq(btn_B_irq)

# 创建定时器1
tim1 = Timer(1)

# pixles
color_index = 0
color = ((32, 0, 0), (0, 32, 0), (0, 0, 32))

def Rgb_Neopixel():
    global color_index,color
    for i in range(0, 3):
        rgb[i] = color[color_index]
    rgb.write()
    color_index = color_index + 1
    color_index = color_index % 3
  
# 镭射雕刻机通讯
def Print_Serial_num():
    u = UART(2, baudrate=115200, bits=8, parity=None, stop=1, rx=26, tx=25,timeout=200)
    display.fill(1)
    display.show()
    while True:
    
        if u.readline()=='COM:Give me string'.encode():
      
            sleep_ms(10)
            u.write(machine_id[:6]+'\n')
            u.write(machine_id[6:]+'\n\r')
            u.write(machine_id[:6]+'\n')
            u.write(machine_id[6:]+'\n\r')
      
    
 # pixles timer
tim1.init(period=1000, mode=Timer.PERIODIC, callback=lambda t:Rgb_Neopixel()) 

#oled full pixel test
testoled()
sleep_ms(1000)
oled.fill(0)
oled.show()

while True:
    print("----------------------------")
    print('P:%d,Y:%d, T:%d, H:%d, O:%d, N:%d' % (touchPad_P.read(),touchPad_Y.read(),touchPad_T.read(),touchPad_H.read(),touchPad_O.read(),touchPad_N.read()))
    print('P0:%d, P1:%d ,P2:%d, P3/ext:%d' % (P0.read_analog(),P1.read_analog(),P2.read_analog(),ext.read_analog()))
    print('light:%d,Sound:%d' % (light.read(),sound.read()))
    print('Accel,x = %.2f, y = %0.2f, z = %.2f ' % (accelerometer.get_x(), accelerometer.get_y(), accelerometer.get_z()))
    try:
        print("BME280,Temp:{:.1f}C,Pressure:{:.1f}Pa,Humi:{:.1f}%" .format(bme280.temperature(),bme280.pressure(),bme280.humidity()))
    except Exception as er:
        print("Your mPython have not BME280!")
    print("\n\r")
    oled.rect(0,0,128,64,1)
    oled.DispChar('声音:%d,光线:%d' % (sound.read(),light.read()), 3, 3)
    oled.DispChar('加速度:%.1f,%.1f,%.1f' %(accelerometer.get_x(), accelerometer.get_y(), accelerometer.get_z()),3,16)
    oled.DispChar('id:%s' %machine_id,3,42)
    oled.show()
    oled.fill(0) 
    if ext.read_analog()==0 and P2.read_analog()==4095:
        Print_Serial_num()
    
















































